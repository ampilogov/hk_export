import HealthKit

enum UserDefaultsKeys {
    static let SERVER_URL = "serverURL"
    static let SENDER = "sender"
    static let AUTO_SERVER_DISCOVERY_ENABLED = "autoServerDiscoveryEnabled"
    static let CUSTOM_LOGGER_LOGS = "CustomLoggerLogs"
}

class ExportConstants {
    static let QUANTITY_TYPES: [HKQuantityTypeIdentifier] = [
        .stepCount,
        .distanceWalkingRunning,
        .runningGroundContactTime,
        .runningPower,
        .runningSpeed,
        .runningStrideLength,
        .runningVerticalOscillation,
        .distanceCycling,
        .pushCount,
        .distanceWheelchair,
        .swimmingStrokeCount,
        .distanceSwimming,
        .distanceDownhillSnowSports,
        .basalEnergyBurned,
        .activeEnergyBurned,
        .flightsClimbed,
        .nikeFuel,
        .appleExerciseTime,
        .appleMoveTime,
        .appleStandTime,
        .vo2Max,
        .height,
        .bodyMass,
        .bodyMassIndex,
        .leanBodyMass,
        .bodyFatPercentage,
        .waistCircumference,
        .appleSleepingWristTemperature,
        .basalBodyTemperature,
        .environmentalAudioExposure,
        .headphoneAudioExposure,
        .heartRate,
        .restingHeartRate,
        .walkingHeartRateAverage,
        .heartRateVariabilitySDNN,
        .heartRateRecoveryOneMinute,
        .atrialFibrillationBurden,
        .oxygenSaturation,
        .bodyTemperature,
        .bloodPressureDiastolic,
        .bloodPressureSystolic,
        .respiratoryRate,
        .bloodGlucose,
        .electrodermalActivity,
        .forcedExpiratoryVolume1,
        .forcedVitalCapacity,
        .inhalerUsage,
        .insulinDelivery,
        .numberOfTimesFallen,
        .peakExpiratoryFlowRate,
        .peripheralPerfusionIndex,
        .appleSleepingWristTemperature,
        .dietaryBiotin,
        .dietaryCaffeine,
        .dietaryCalcium,
        .dietaryCarbohydrates,
        .dietaryChloride,
        .dietaryCholesterol,
        .dietaryChromium,
        .dietaryCopper,
        .dietaryEnergyConsumed,
        .dietaryFatMonounsaturated,
        .dietaryFatPolyunsaturated,
        .dietaryFatSaturated,
        .dietaryFatTotal,
        .dietaryFiber,
        .dietaryFolate,
        .dietaryIodine,
        .dietaryIron,
        .dietaryMagnesium,
        .dietaryManganese,
        .dietaryMolybdenum,
        .dietaryNiacin,
        .dietaryPantothenicAcid,
        .dietaryPhosphorus,
        .dietaryPotassium,
        .dietaryProtein,
        .dietaryRiboflavin,
        .dietarySelenium,
        .dietarySodium,
        .dietarySugar,
        .dietaryThiamin,
        .dietaryVitaminA,
        .dietaryVitaminB12,
        .dietaryVitaminB6,
        .dietaryVitaminC,
        .dietaryVitaminD,
        .dietaryVitaminE,
        .dietaryVitaminK,
        .dietaryWater,
        .dietaryZinc,
        .bloodAlcoholContent,
        .numberOfAlcoholicBeverages,
        .appleWalkingSteadiness,
        .sixMinuteWalkTestDistance,
        .walkingSpeed,
        .walkingStepLength,
        .walkingAsymmetryPercentage,
        .walkingDoubleSupportPercentage,
        .stairAscentSpeed,
        .stairDescentSpeed,
        .uvExposure,
        .underwaterDepth,
        .waterTemperature,
        .appleSleepingBreathingDisturbances,
        .crossCountrySkiingSpeed,
        .cyclingCadence,
        .cyclingFunctionalThresholdPower,
        .cyclingPower,
        .cyclingSpeed,
        .distanceCrossCountrySkiing,
        .distancePaddleSports,
        .distanceRowing,
        .distanceSkatingSports,
        .environmentalSoundReduction,
        .estimatedWorkoutEffortScore,
        .paddleSportsSpeed,
        .physicalEffort,
        .rowingSpeed,
        .timeInDaylight,
        .workoutEffortScore,
    ]

    static let CATEGORY_TYPES: [HKCategoryTypeIdentifier] = [
        .appleStandHour,
        .lowCardioFitnessEvent,
        .menstrualFlow,
        .intermenstrualBleeding,
        .infrequentMenstrualCycles,
        .irregularMenstrualCycles,
        .persistentIntermenstrualBleeding,
        .prolongedMenstrualPeriods,
        .cervicalMucusQuality,
        .ovulationTestResult,
        .progesteroneTestResult,
        .sexualActivity,
        .contraceptive,
        .pregnancy,
        .pregnancyTestResult,
        .lactation,
        .environmentalAudioExposureEvent,
        .headphoneAudioExposureEvent,
        // .audioExposureEvent,
        .lowHeartRateEvent,
        .highHeartRateEvent,
        .irregularHeartRhythmEvent,
        .appleWalkingSteadinessEvent,
        .abdominalCramps,
        .bloating,
        .constipation,
        .diarrhea,
        .heartburn,
        .nausea,
        .vomiting,
        .appetiteChanges,
        .chills,
        .dizziness,
        .fainting,
        .fatigue,
        .fever,
        .generalizedBodyAche,
        .hotFlashes,
        .chestTightnessOrPain,
        .coughing,
        .rapidPoundingOrFlutteringHeartbeat,
        .shortnessOfBreath,
        .skippedHeartbeat,
        .wheezing,
        .lowerBackPain,
        .headache,
        .memoryLapse,
        .moodChanges,
        .lossOfSmell,
        .lossOfTaste,
        .runnyNose,
        .soreThroat,
        .sinusCongestion,
        .breastPain,
        .pelvicPain,
        .vaginalDryness,
        .acne,
        .drySkin,
        .hairLoss,
        .nightSweats,
        .sleepChanges,
        .bladderIncontinence,
        .mindfulSession,
        .sleepAnalysis,
        .toothbrushingEvent,
        .handwashingEvent,
        .bleedingAfterPregnancy,
        .bleedingDuringPregnancy,
        .sleepApneaEvent,
    ]

    static let CLINICAL_TYPES: [HKClinicalTypeIdentifier] = [
        .allergyRecord,
        .clinicalNoteRecord,
        .conditionRecord,
        .immunizationRecord,
        .labResultRecord,
        .medicationRecord,
        .procedureRecord,
        .vitalSignRecord,
        .coverageRecord,
    ]

    static func getSampleTypesOfInterest() -> [HKSampleType] {
        let sampleTypesOfInterest =
            [
                HKObjectType.workoutType(),
                HKSeriesType.heartbeat(),
                HKSeriesType.workoutRoute(),
                HKObjectType.stateOfMindType(),
            ]
            + ExportConstants.QUANTITY_TYPES.map {
                HKQuantityType.quantityType(forIdentifier: $0)!
            }
            + ExportConstants.CATEGORY_TYPES.map {
                HKCategoryType.categoryType(forIdentifier: $0)!
            }
            + ExportConstants.CLINICAL_TYPES.map {
                HKClinicalType.clinicalType(forIdentifier: $0)!
            }
        return Array(Set(sampleTypesOfInterest))
    }
}
